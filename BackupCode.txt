using System;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace AddressBookAssignment
{
    public partial class Form1 : Form
    {
        // Instantiate global variables for SQL
        SqlConnection con;
        SqlCommand cmd;
        SqlDataReader reader;
        Connection dbconn = new Connection();

        public Form1()
        {
            InitializeComponent();
            LoadContacts();  // Load existing contacts on form load
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("EXIT APPLICATION ?", "EXIT", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        private void btnAddContact_Click(object sender, EventArgs e)
        {
            panel2.Enabled = true;  // Enable the form panel for adding a new contact
            btnUpdate.Enabled = false;  // Disable update button while adding new contact
            btnClear.Enabled = true;  // Enable clear button
        }

        public int CalculateAge(DateTime birthDate)
        {
            int age = DateTime.Now.Year - birthDate.Year;
            if (DateTime.Now < birthDate.AddYears(age)) age--; // Adjust if the birthday hasn't occurred yet this year
            return age;
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            // Validate if required fields are filled
            if (string.IsNullOrEmpty(txtLastName.Text))
            {
                MessageBox.Show("Please enter a valid Last Name!", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (string.IsNullOrEmpty(txtFirstName.Text))
            {
                MessageBox.Show("Please enter a valid First Name!", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (string.IsNullOrEmpty(txtAge.Text) || !int.TryParse(txtAge.Text, out _))
            {
                MessageBox.Show("Please enter a valid age!", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            try
            {
                using (con = new SqlConnection(dbconn.MyConnectionDB()))
                {
                    con.Open();
                    string insertQuery = "INSERT INTO TBL_USERPROFILE (LASTNAME, FIRSTNAME, MIDDLENAME, SEX, BIRTHDATE, AGE, CONTACTNO, EMAIL, ADDRESS) " +
                                         "VALUES (@LASTNAME, @FIRSTNAME, @MIDDLENAME, @SEX, @BIRTHDATE, @AGE, @CONTACTNO, @EMAIL, @ADDRESS)";

                    cmd = new SqlCommand(insertQuery, con);
                    cmd.Parameters.AddWithValue("@LASTNAME", txtLastName.Text);
                    cmd.Parameters.AddWithValue("@FIRSTNAME", txtFirstName.Text);
                    cmd.Parameters.AddWithValue("@MIDDLENAME", txtMidName.Text);
                    cmd.Parameters.AddWithValue("@SEX", cmbSex.Text);
                    cmd.Parameters.AddWithValue("@BIRTHDATE", dtpBirthDate.Value);
                    cmd.Parameters.AddWithValue("@AGE", txtAge.Text);
                    cmd.Parameters.AddWithValue("@CONTACTNO", txtMobileNo.Text);
                    cmd.Parameters.AddWithValue("@EMAIL", txtEmailAdd.Text);
                    cmd.Parameters.AddWithValue("@ADDRESS", txtAddress.Text);

                    cmd.ExecuteNonQuery();
                }

                MessageBox.Show("New Contact Added Successfully!", "Saved", MessageBoxButtons.OK, MessageBoxIcon.Information);
                ClearText();
                LoadContacts();  // Refresh the contact list
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error adding contact: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void ClearText()
        {
            // Clear all input fields
            txtLastName.Clear();
            txtFirstName.Clear();
            txtMidName.Clear();
            cmbSex.SelectedIndex = -1;  // Reset the ComboBox selection
            dtpBirthDate.Value = DateTime.Now;
            txtAge.Clear();
            txtMobileNo.Clear();
            txtEmailAdd.Clear();
            txtAddress.Clear();

            panel2.Enabled = false;  // Disable the panel after saving
        }

        private void dtpBirthDate_ValueChanged(object sender, EventArgs e)
        {
            // Update age when birth date is changed
            txtAge.Text = CalculateAge(dtpBirthDate.Value.Date).ToString();
        }

        public void LoadContacts()
        {
            try
            {
                using (con = new SqlConnection(dbconn.MyConnectionDB()))
                {
                    con.Open();
                    dataGridView1.Rows.Clear();  // Clear existing rows
                    int i = 0;
                    cmd = new SqlCommand("SELECT * FROM TBL_USERPROFILE", con);
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        i++;
                        dataGridView1.Rows.Add(i,
                            reader["ID"].ToString(),
                            reader["FULLNAME"].ToString(),
                            reader["BIRTHDATE"].ToString(),
                            reader["AGE"].ToString(),
                            reader["CONTACTNO"].ToString(),
                            reader["EMAIL"].ToString(),
                            reader["ADDRESS"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error loading contacts: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                string colName = dataGridView1.Columns[e.ColumnIndex].Name;  // Get column name
                int id = int.Parse(dataGridView1.Rows[e.RowIndex].Cells["ID"].Value.ToString());  // Get ID from selected row

                if (colName == "Edit")
                {
                    panel2.Enabled = true;
                    btnAdd.Enabled = false;  // Disable Add button during editing
                    btnUpdate.Enabled = true;  // Enable Update button during editing

                    // Fetch contact details to populate the form for editing
                    using (con = new SqlConnection(dbconn.MyConnectionDB()))
                    {
                        con.Open();
                        cmd = new SqlCommand("SELECT * FROM TBL_USERPROFILE WHERE ID = @ID", con);
                        cmd.Parameters.AddWithValue("@ID", id);
                        reader = cmd.ExecuteReader();

                        if (reader.Read())
                        {
                          
                            txtLastName.Text = reader["LASTNAME"].ToString();
                            txtFirstName.Text = reader["FIRSTNAME"].ToString();
                            txtMidName.Text = reader["MIDDLENAME"].ToString();
                            cmbSex.Text = reader["SEX"].ToString();
                            dtpBirthDate.Value = DateTime.Parse(reader["BIRTHDATE"].ToString());
                            txtAge.Text = reader["AGE"].ToString();
                            txtMobileNo.Text = reader["CONTACTNO"].ToString();
                            txtEmailAdd.Text = reader["EMAIL"].ToString();
                            txtAddress.Text = reader["ADDRESS"].ToString();
                        }
                    }
                }
                else if (colName == "Delete")
                {
                    // Handle contact deletion
                    if (MessageBox.Show("Are you sure you want to delete this contact?", "Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                    {
                        using (con = new SqlConnection(dbconn.MyConnectionDB()))
                        {
                            con.Open();
                            cmd = new SqlCommand("DELETE FROM TBL_USERPROFILE WHERE ID = @ID", con);
                            cmd.Parameters.AddWithValue("@ID", id);
                            cmd.ExecuteNonQuery();
                        }

                        MessageBox.Show("Contact deleted successfully!", "Deleted", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        LoadContacts();  // Refresh the contact list
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error processing contact details: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                // Update the selected contact in the database
                using (con = new SqlConnection(dbconn.MyConnectionDB()))
                {
                    con.Open();
                    string updateQuery = "UPDATE TBL_USERPROFILE SET LASTNAME = @LASTNAME, FIRSTNAME = @FIRSTNAME, MIDDLENAME = @MIDDLENAME, " +
                                         "SEX = @SEX, BIRTHDATE = @BIRTHDATE, AGE = @AGE, CONTACTNO = @CONTACTNO, EMAIL = @EMAIL, ADDRESS = @ADDRESS " +
                                         "WHERE ID = @ID";

                    cmd = new SqlCommand(updateQuery, con);
                    cmd.Parameters.AddWithValue("@LASTNAME", txtLastName.Text);
                    cmd.Parameters.AddWithValue("@FIRSTNAME", txtFirstName.Text);
                    cmd.Parameters.AddWithValue("@MIDDLENAME", txtMidName.Text);
                    cmd.Parameters.AddWithValue("@SEX", cmbSex.Text);
                    cmd.Parameters.AddWithValue("@BIRTHDATE", dtpBirthDate.Value);
                    cmd.Parameters.AddWithValue("@AGE", txtAge.Text);
                    cmd.Parameters.AddWithValue("@CONTACTNO", txtMobileNo.Text);
                    cmd.Parameters.AddWithValue("@EMAIL", txtEmailAdd.Text);
                    cmd.Parameters.AddWithValue("@ADDRESS", txtAddress.Text);
                  

                    cmd.ExecuteNonQuery();
                }

                MessageBox.Show("Contact updated successfully!", "Updated", MessageBoxButtons.OK, MessageBoxIcon.Information);
                ClearText();
                LoadContacts();  // Refresh the contact list
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error updating contact: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtSearch_TextChanged(object sender, EventArgs e)
        {
            // Ensure the search term is not empty before executing the query
            if (string.IsNullOrWhiteSpace(txtSearch.Text))
            {
                // If the search text is empty, reload all contacts
                LoadContacts();
                return;
            }

            try
            {
                // Determine the first letter of the entered text in the search box
                char firstLetter = char.ToUpper(txtSearch.Text[0]);

                // Check if the first letter falls within 'A' to 'M' or 'N' to 'Z'
                string query;

                if (firstLetter >= 'A' && firstLetter <= 'M')
                {
                    // Query for contacts whose last name starts with 'A' to 'M'
                    query = "SELECT * FROM TBL_USERPROFILE WHERE LASTNAME LIKE @searchTerm";
                }
                else if (firstLetter >= 'N' && firstLetter <= 'Z')
                {
                    // Query for contacts whose last name starts with 'N' to 'Z'
                    query = "SELECT * FROM TBL_USERPROFILE WHERE LASTNAME LIKE @searchTerm";
                }
                else
                {
                    // If the letter is not in the range A-Z, clear the results
                    MessageBox.Show("Please enter a valid letter between A to Z for search.", "Invalid Input", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    dataGridView1.Rows.Clear();
                    return;
                }

                // Open the connection
                using (con = new SqlConnection(dbconn.MyConnectionDB()))
                {
                    con.Open();

                    // Create the SQL command with the query and connection
                    cmd = new SqlCommand(query, con);

                    // Add the parameter to the command (search term with wildcards for LIKE operation)
                    cmd.Parameters.AddWithValue("@searchTerm", txtSearch.Text + "%");

                    // Execute the command and read results
                    using (reader = cmd.ExecuteReader())
                    {
                        dataGridView1.Rows.Clear();  // Clear any previous search results

                        int i = 0;
                        while (reader.Read())
                        {
                            i++;
                            // Add the row data from the reader to the DataGridView
                            dataGridView1.Rows.Add(i,
                                reader["ID"].ToString(),
                                reader["FULLNAME"].ToString(),
                                reader["BIRTHDATE"].ToString(),
                                reader["AGE"].ToString(),
                                reader["CONTACTNO"].ToString(),
                                reader["EMAIL"].ToString(),
                                reader["ADDRESS"].ToString());
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        
    }
}
